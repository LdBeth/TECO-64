! TECO test: Map keys to macros w/ FM !
! Requires: TECO-64 !
! Expects: PASS [FM-02.txt] !

[[enter]]

0,8 E1

! Test: map all keys w/ :FM !

0 U0                    ! Use flag argument of 0 !
0 U1                    ! No. of mapped keys !
0 U2                    ! No. of undefined keys !

! Q-register 2 contains a macro that sets up the command string to map the !
! specified key and then detects whether mapping succeeded or failed. !

@^U2$                               ! Load Q-register 2 !
    . U3                            ! Save current position in Q-register 3 !
    @I\:@FM"\                       ! Insert start of FM command !
    G1                              ! Add in name of key !
    @I\"@^A'[\                      ! Insert start of ^A command !
    G1                              ! Insert name of string !
    @I\]'"\                         ! Insert end of ^A command !
    Q3,. X4                         ! Copy everything to Q-register 4 !
    Q3,. D                          ! Delete what we added to edit buffer !
    M4 U4                           ! Execute macro and save result !
    Q0&1 "E                         ! Don't print results if bit 0 is set !
        Q4 "N                       ! Success or failure? !
            @^A"Mapped key ["       ! Success !
        |
            @^A"Undefined key ["    ! Failure !
        '
        :G1                         ! Print name of key !
        ^^]^T                       ! Terminate the announcement !
        [[^T]]                          ! End the line !
    '
    Q4 "N %1 | %2 '                 ! Increment success/failure count !
$                                   ! Q-register 2 is complete now !

! Q-register 1 contains the name of each key we're trying to map !

@^U1/UP/     M2    @^U1/S_UP/     M2    @^U1/C_UP/     M2    @^U1/A_UP/     M2
@^U1/DOWN/   M2    @^U1/S_DOWN/   M2    @^U1/C_DOWN/   M2    @^U1/A_DOWN/   M2
@^U1/LEFT/   M2    @^U1/S_LEFT/   M2    @^U1/C_LEFT/   M2    @^U1/A_LEFT/   M2
@^U1/RIGHT/  M2    @^U1/S_RIGHT/  M2    @^U1/C_RIGHT/  M2    @^U1/A_RIGHT/  M2

@^U1/HOME/   M2    @^U1/S_HOME/   M2    @^U1/C_HOME/   M2    @^U1/A_HOME/   M2
@^U1/END/    M2    @^U1/S_END/    M2    @^U1/C_END/    M2    @^U1/A_END/    M2
@^U1/PGUP/   M2    @^U1/S_PGUP/   M2    @^U1/C_PGUP/   M2    @^U1/A_PGUP/   M2
@^U1/PGDN/   M2    @^U1/S_PGDN/   M2    @^U1/C_PGDN/   M2    @^U1/A_PGDN/   M2
@^U1/DELETE/ M2    @^U1/S_DELETE/ M2    @^U1/C_DELETE/ M2    @^U1/A_DELETE/ M2
@^U1/INSERT/ M2    @^U1/S_INSERT/ M2    @^U1/C_INSERT/ M2    @^U1/A_INSERT/ M2

@^U1/F1/  M2    @^U1/S_F1/  M2    @^U1/C_F1/  M2
@^U1/F2/  M2    @^U1/S_F2/  M2    @^U1/C_F2/  M2
@^U1/F3/  M2    @^U1/S_F3/  M2    @^U1/C_F3/  M2
@^U1/F4/  M2    @^U1/S_F4/  M2    @^U1/C_F4/  M2
@^U1/F5/  M2    @^U1/S_F5/  M2    @^U1/C_F5/  M2
@^U1/F6/  M2    @^U1/S_F6/  M2    @^U1/C_F6/  M2
@^U1/F7/  M2    @^U1/S_F7/  M2    @^U1/C_F7/  M2
@^U1/F8/  M2    @^U1/S_F8/  M2    @^U1/C_F8/  M2
@^U1/F9/  M2    @^U1/S_F9/  M2    @^U1/C_F9/  M2
@^U1/F10/ M2    @^U1/S_F10/ M2    @^U1/C_F10/ M2
@^U1/F10/ M2    @^U1/S_F11/ M2    @^U1/C_F11/ M2
@^U1/F12/ M2    @^U1/S_F12/ M2    @^U1/C_F12/ M2

Q0&2 "E                             ! Don't print results if bit 1 is set !
    Q1 :@=/%d key/ Q1-1 "N ^^s^T ' @^A/ mapped, /
    Q2 :@=/%d key/ Q2-1 "N ^^s^T ' @^A/ undefined/
    [[^T]]
'

! Test: conditionally unmap keys w/ FM !

Q0&4 "N                             ! Unmap standard keys if bit 2 is set !
    @FM/UP//
    @FM/DOWN//
    @FM/LEFT//
    @FM/RIGHT//
    @FM/HOME//
    @FM/END//
    @FM/PGUP//
    @FM/PGDN//
'

[[exit]]
